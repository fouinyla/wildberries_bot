from db.db_connector import Database
from logic.notification_service import Notification_Service
from .inline_buttons_process_callback import InlineCallback
from . import states
from . import wildberries as wb
from . import mpstats
from . import utils
from . import markups
from const.phrases import *
from const.const import *
from . import memory
from aiogram.utils.markdown import hlink
from aiogram.types import InputFile
from math import ceil
from datetime import date
import json
import re
import os
from aiogram.utils.exceptions import BotBlocked


class Controller:
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.notification = Notification_Service(bot=self.bot)
        self.inline_buttons_callback = InlineCallback(bot=self.bot)
        self.load_categories()
        self.load_admins()

    def load_categories(self):
        for f in os.listdir("static/cats"):
            with open("static/cats/" + f, mode="r") as json_file:
                memory.categories[f.split(".json")[0]] = json_file.read()

    def load_admins(self):
        memory.admins = self.db.get_admins()

    async def subscribed(self, user_id: int) -> bool:
        """
        Checks if user is subscribed to the customer's channel.
        """
        status = await self.bot.get_chat_member(chat_id=CUSTOMER_CHANNEL_ID,
                                                user_id=user_id)
        return status['status'] != 'left'

    async def command_start(self, message, state):
        await state.finish()
        if not await self.subscribed(message.from_user.id):
            name = message.from_user.first_name
            text = f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}!</b>\n\n–≠—Ç–æ –Ω–∞—à –±–æ—Çü§ñ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ WB.\n" \
                f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {hlink('OPTSHOP', 'https://t.me/opt_tyrke')}"
            markup = markups.not_subscribed_markup()
            return dict(text=text, markup=markup)

        user = self.db.get_user(message.from_user.id)
        if user:
            text = '<b>–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É ' \
                   '<b>"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"</b>'
            if message.from_user.id in memory.admins:
                markup = markups.admin_start_menu_markup()
            else:
                markup = markups.start_menu_markup()
        else:
            text = '–î–ª—è –Ω–∞—á–∞–ª–∞ –º—ã —Ö–æ—Ç–∏–º —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ –≤–∞—Å.\n' + \
                '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è</b>.'
            markup = None
            await state.set_state(states.User.name)
        return dict(text=text, markup=markup)

    # ________________________admin_part_______________________________
    async def admin_menu(self, state):
        await state.finish()
        markup = markups.admin_menu_markup()
        text = '<b>–≠—Ç–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞</b>'
        return dict(text=text, markup=markup)

    async def get_number_of_users(self):
        markup = markups.admin_menu_markup()
        number_of_users = self.db.get_number_of_users()
        last_number = number_of_users % 10
        text = f'–í –Ω–∞—à–µ–º –±–æ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {number_of_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª{ENDINGS_FOR_WORD_USER[last_number]}.'
        return dict(text=text, markup=markup)

    async def get_data_from_db(self, message):
        markup = markups.admin_menu_markup()
        file_name = self.db.get_data_from_db()
        await message.answer_document(document=InputFile(file_name))
        os.remove(file_name)
        text = '–≠—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –∏–∑ –≤—Å–µ–π –ë–î.'
        return dict(text=text, markup=markup)

    async def pre_step_for_add_admin(self, state):
        text = '–í–≤–µ–¥–∏—Ç–µ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.\n' \
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π tg_id —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @getmyid_bot . ' \
            '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º –æ–±—â–µ–Ω–∏–µ. ' \
            '–ò–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤—ã–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î.'
        markup = markups.back_to_admin_menu_markup()
        await state.set_state(states.Admin.tg_id_to_add)
        return dict(text=text, markup=markup)

    async def add_admin(self, message, state):
        if message.text == '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await state.finish()
            text = "<b>–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"
        else:
            if message.text.isdigit():
                new_admin_tg_id = int(message.text)
                new_admin = self.db.get_user(new_admin_tg_id)
                if new_admin:
                    self.db.add_admin_to_user(new_admin_tg_id)
                    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_admin['tg_nickname']} –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞."
                else:
                    text = f'–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î.\n–°–Ω–∞—á–∞–ª–∞ –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.'
            else:
                text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
        markup = markups.admin_menu_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    async def pre_step_for_delete_admin(self, state):
        text = '–í–≤–µ–¥–∏—Ç–µ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.\n' \
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π tg_id —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @getmyid_bot . ' \
            '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º –æ–±—â–µ–Ω–∏–µ.' \
            '–ò–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤—ã–≥—Ä—É–∑–∫–µ –∏–∑ –ë–î.'
        markup = markups.back_to_admin_menu_markup()
        await state.set_state(states.Admin.tg_id_to_delete)
        return dict(text=text, markup=markup)

    async def delete_admin(self, message, state):
        if message.text == '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await state.finish()
            text = "<b>–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"
        else:
            if message.text.isdigit():
                del_admin_tg_id = int(message.text)
                del_admin = self.db.get_user(del_admin_tg_id)
                if del_admin:
                    self.db.delete_admin_to_user(del_admin_tg_id)
                    text = f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {del_admin['tg_nickname']} —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞."
                else:
                    text = f'–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î.\n–ê –∑–Ω–∞—á–∏—Ç –∏ –∞–¥–º–∏–Ω–∫–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç.'
            else:
                text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ id –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
        markup = markups.admin_menu_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    async def pre_step_for_mailing_to_clients(self, state):
        text = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –±–æ—Ç–µ ' \
               '(–Ω–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–º –µ–≥–æ). –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª—ã –∏ <b>—Å—Ä–µ–¥—Å—Ç–≤–∞ HTML</b>.'
        markup = markups.back_to_admin_menu_markup()
        await state.set_state(states.Admin.message_to_clients)
        return dict(text=text, markup=markup)

    async def confirmation_mailing_to_clients(self, message, state):
        async with state.proxy() as data:
            data['message_to_clients'] = message.text
        text = f'–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?\n\n{message.text}'
        markup = markups.confirmation_mailing_markup()
        return dict(text=text, markup=markup)

    async def mailing_to_clients(self, state):
        tg_id_list = self.db.get_all_users_list()
        async with state.proxy() as data:
            for tg_id in tg_id_list:
                try:
                    await self.bot.send_message(tg_id, data['message_to_clients'], parse_mode='HTML')
                except BotBlocked:
                    pass
        text = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'
        markup = markups.admin_menu_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    # ____________________end_of_admin_part____________________________

    async def message_name_state(self, message, state):
        name_pattern = r'[—ë–Å–ê-–Ø–∞-—è- A-za-z]+'
        if re.fullmatch(name_pattern, message.text):
            async with state.proxy() as data:
                data['name'] = message.text
            text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail</b>.'
            markup = markups.back_to_name_markup()
            await state.set_state(states.User.email)
        else:
            text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å).'
            markup = None
        return dict(text=text, markup=markup)

    async def message_email_state(self, message, state):
        email_pattern = r'([A-Za-z0-9]+[\.\-\_])*[A-Za-z0-9]+@[A-Za-z0-9]+[A-Za-z0-9-\+]*[A-Za-z0-9]+(\.[A-Z|a-z]{2,})+'
        if re.fullmatch(email_pattern, message.text):
            async with state.proxy() as data:
                data['email'] = message.text
            text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.'
            markup = markups.back_to_email_markup()
            await state.set_state(states.User.phone_number)
        elif message.text == '–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏':
            text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è</b>.'
            markup = None
            await state.set_state(states.User.name)
        else:
            text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã).'
            markup = markups.back_to_name_markup()
        return dict(text=text, markup=markup)

    async def message_phone_number_state(self, message, state):
        phone_pattern = re.compile(r'[0-9 \+\-\(\)]{7,}')
        if re.fullmatch(phone_pattern, message.text):
            async with state.proxy() as data:
                data['phone_number'] = message.text
                self.db.add_user(message.from_user.id,
                                 message.from_user.username,
                                 data['name'],
                                 data['email'],
                                 data['phone_number'])
            await state.finish()
            text = '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.'
            markup = markups.start_menu_markup()
        elif message.text == '–ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –ø–æ—á—Ç—ã':
            text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail</b>.'
            markup = markups.back_to_name_markup()
            await state.set_state(states.User.email)
        else:
            text = '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ø–ª—é—Å, –º–∏–Ω—É—Å –∏–ª–∏ —Å–∫–æ–±–∫–∏).'
            markup = markups.back_to_email_markup()
        return dict(text=text, markup=markup)

    async def search_query(self, state):
        print('search_query')
        markup = markups.back_to_main_menu_markup()
        text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å</b> üîé\n\n–ù–∞—à —Ä–æ–±–æ—Ç –≤—ã–¥–∞—Å—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–∞–∫ –µ–≥–æ –º–æ–∂–Ω–æ "—É—Ç–æ—á–Ω–∏—Ç—å".\n' \
               '–ü–æ–¥–æ–±—Ä–∞–≤ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ª—É—á—à–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å –ø–æ –Ω–∏–º SEO - –Ω–∞–±–æ—Ä —Å–ª–æ–≤, ' \
               '–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.'
        await state.set_state(states.NameGroup.query)
        return dict(text=text, markup=markup)

    async def giving_hints(self, message, state):
        print('giving_hints')
        async with state.proxy() as data:
            data['query'] = message.text
            user = self.db.get_user(tg_id=message.from_user.id)
            if user:
                self.db.add_search_query(search_query=message.text,
                                         user_id=user['id'])
            hints = await wb.get_hints(data['query'])
            if hints:
                text = '\n'.join(hints)
            elif hints == [] or (hints is None and await wb.product_exists(data['query'])):
                text = '–í—ã –≤–≤–µ–ª–∏ –∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ï–≥–æ —É–∂–µ –Ω–∏–∫–∞–∫ –Ω–µ —É–ª—É—á—à–∏—Ç—å.\n' \
                       '<b>–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ SEO?</b>'
            else:
                text = '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π –Ω–∞ Wildberries –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å</b>.'
        markup = markups.another_search_query_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    async def building_seo_core(self, state):
        print('building_seo_core')
        markup = markups.back_to_main_menu_markup()
        text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>.\n\n' \
            '–Ø —Å–æ–±–µ—Ä—É SEO —É 100 –ø–æ–ø—É–ª—è—Ä–Ω–µ–π—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ WB –ø–æ —ç—Ç–∏–º –∑–∞–ø—Ä–æ—Å–∞–º.\n' \
            '<b>–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.</b>'
        await state.set_state(states.NameGroup.SEO_queries)
        return dict(text=text, markup=markup)

    async def waiting_seo_result(self, message, state):
        print('waiting_seo_result')
        async with state.proxy() as data:
            data['SEO_queries'] = message.text
        text = '<b>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º excel-—Ñ–∞–π–ª..</b>\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤).'
        markup = markups.back_to_main_menu_markup()
        return dict(text=text, markup=markup)

    async def building_seo_result(self, message, state):
        print('building_seo_result')
        async with state.proxy() as data:
            print(data['SEO_queries'])
            path_to_excel, flag_all_empty_queries = await mpstats.get_seo(data['SEO_queries'])
            if not flag_all_empty_queries:
                await message.answer_document(document=InputFile(path_to_excel))
                user = self.db.get_user(tg_id=message.from_user.id)
                if user:
                    query_for_SEO = str(message.text).replace('\n', '; ')
                    self.db.add_SEO_query(query_for_SEO=query_for_SEO,
                                          tg_id=message.from_user.id)
                text = '<b>SEO –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ!</b>'
            else:
                text = '<b>–ü–æ –¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ WB –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>\n–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –¥—Ä—É–≥–∏–µ?'
            os.remove(path_to_excel)
            await state.finish()
            markup = markups.another_seo_building_markup()
        return dict(text=text, markup=markup)

    async def position_search(self, state):
        markup = markups.back_to_main_menu_markup()
        text = CARD_POSITION_TEXT
        await state.set_state(states.NameGroup.range_search)
        return dict(text=text, markup=markup)

    async def waiting_for_article_search(self, message, state):
        range_search_pattern = r'[0-9]{8}\s.+'
        if re.fullmatch(range_search_pattern, message.text):
            async with state.proxy() as data:
                data['range_search'] = message.text.split(' ', maxsplit=1)
            text = 'üîé<b>–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω..</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.'
            markup = None
            is_valid_query = True
        else:
            text = '<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.</b>\n'\
                   '–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞ (8 —Ü–∏—Ñ—Ä) –∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º.'
            markup = markups.another_card_position_search_markup()
            is_valid_query = False
        return dict(text=text, markup=markup, is_valid_query=is_valid_query)

    async def article_search(self, message, state):
        async with state.proxy() as data:
            art_number = int(data['range_search'][0])
            query = data['range_search'][1]
            position = await wb.search_for_article(art_number, query)
            if position:
                text = f"–ê—Ä—Ç–∏–∫—É–ª {art_number} –ø–æ –∑–∞–ø—Ä–æ—Å—É {query} –Ω–∞–π–¥–µ–Ω!\n\n" \
                    f"<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞: {position[0]}\n–ü–æ–∑–∏—Ü–∏—è: {position[1]}</b>"
                user = self.db.get_user(tg_id=message.from_user.id)
                if user:
                    self.db.add_search_position_query(
                        search_position_query=message.text,
                        tg_id=message.from_user.id)
            else:
                text = '<b>–¢–æ–≤–∞—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.</b>\n–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –¥—Ä—É–≥–æ–π?'
        markup = markups.another_card_position_search_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    async def category_selection(self, state):
        parent = '0'
        categories = json.load(open(f'static/cats/{parent}.json'))
        text = phrase_for_categories_inline_keyboard(data=dict(category='',
                                                               current_page=1,
                                                               total_page=ceil(len(categories)/INLINE_CATS_COUNT_PER_PAGE)))
        markup = markups.inline_categories_markup(
            categories=[dict(id=key, name=value.split('/')[-1]) for key, value in categories.items()][:INLINE_CATS_COUNT_PER_PAGE],
            cat_id=parent,
            next_page=2,
            back_to=False,
            select=False)
        return dict(text=text, markup=markup)

    # ________________________–ª–æ–≥–∏–∫–∞ –ø–æ –≤—ã–¥–∞—á–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤________________________
    # –≤—ã–±–∏—Ä–∞–µ–º category –¥–ª—è –≤—ã–¥–∞—á–∏ –≥—Ä–∞—Ñ–∏–∫–∞ -> –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å view
    async def callback_graph_category_selection(self, query, state):
        category = await self.inline_buttons_callback.process_callback(query)
        if not category:
            return False
        async with state.proxy() as state:
            state['category'] = category
        text = '–ü–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫?'
        markup = markups.graph_value_selection_markup()
        await self.bot.send_message(chat_id=query.from_user.id,
                                    text=text,
                                    reply_markup=markup)
        return True

    # –≤—ã–±—Ä–∞–ª–∏ value -> –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ date_1
    async def graph_value_selection(self, message, state):
        if message.text not in MPSTATS_TRENDS:
            text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.'
            markup = markups.graph_value_selection_markup()
            await message.answer(text=text, reply_markup=markup)
            return False
        async with state.proxy() as state:
            state['value'] = message.text
        text = '–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...'
        markup = markups.back_to_main_menu_markup()
        await message.answer(text=text, reply_markup=markup)
        graph_data = await mpstats.get_trends_data(state['category'])
        if not graph_data:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –Ω–∞—Å –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
            markup = markups.another_trend_graph_markup()
            await message.answer(text=text, reply_markup=markup)
            return None
        min_date, max_date = utils.get_min_max_week(graph_data, state['value'])
        if min_date is None:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É —É –Ω–∞—Å –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä'
            markup = markups.graph_value_selection_markup()
            await message.answer(text=text, reply_markup=markup)
            return False
        async with state as state:
            state['min_date'] = min_date
            state['max_date'] = max_date
            state['graph_data'] = graph_data
        text = f'–ü–æ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –Ω–∞—Å —Å–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {min_date} –ø–æ {max_date}\n' \
               f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥'
        markup = markups.back_to_main_menu_markup()
        await message.answer(text=text, reply_markup=markup)
        return True

    # –≤–≤–µ–ª–∏ date_1 -> –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ date_2
    async def graph_date_1_selection(self, message, state):
        async with state.proxy() as state:
            pass
        if not re.fullmatch(r'\d{4}-\d{2}-\d{2}', message.text) or date(*map(int, message.text.split('-'))) < state["min_date"]:
            text = f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞.\n' \
                   f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥, –Ω–∞—á–∏–Ω–∞—è —Å {state["min_date"]}'
            markup = markups.back_to_main_menu_markup()
            await message.answer(text=text, reply_markup=markup)
            return False
        async with state as state:
            state['date_1'] = date(*map(int, message.text.split('-')))
        text = '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥'
        markup = markups.back_to_main_menu_markup()
        await message.answer(text=text, reply_markup=markup)
        return True

    # –≤—ã–±—Ä–∞–ª–∏ date_2 -> –≤—ã–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    async def graph_date_2_selection(self, message, state):
        async with state.proxy() as state:
            pass
        if not re.fullmatch(r'\d{4}-\d{2}-\d{2}', message.text) or date(*map(int, message.text.split('-'))) > state["max_date"]:
            text = f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞.\n' \
                   f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥, –∑–∞–∫–∞–Ω—á–∏–≤–∞—è {state["max_date"]}'
            markup = markups.back_to_main_menu_markup()
            await message.answer(text=text, reply_markup=markup)
            return False
        async with state as state:
            state['date_2'] = date(*map(int, message.text.split('-')))
        text = '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫...'
        markup = markups.back_to_main_menu_markup()
        await message.answer(text=text, reply_markup=markup)
        path_to_graph = utils.make_graph(category=state['category'],
                                         value=state['value'],
                                         graph_data=state['graph_data'],
                                         date_1=state['date_1'],
                                         date_2=state['date_2'])
        if path_to_graph:
            await self.bot.send_document(chat_id=message.from_user.id,
                                         document=InputFile(path_to_graph))
            os.remove(path_to_graph)
            text = '–ì—Ä–∞—Ñ–∏–∫ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≥–æ—Ç–æ–≤!'
        else:
            text = '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º —ç—Ç–æ–≥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å üòî\n\n' \
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.'
        markup = markups.another_trend_graph_markup()
        await message.answer(text=text, reply_markup=markup)
        return True
    # __________________–æ–∫–æ–Ω—á–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ –≤—ã–¥–∞—á–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤__________________

    async def callback_price_segmentation(self, query):
        path = await self.inline_buttons_callback.process_callback(query)
        if path:
            path_to_excel = await mpstats.get_price_segmentation(path)
            if path_to_excel:
                user = self.db.get_user(tg_id=query.from_user.id)
                if user:
                    self.db.add_price_query(query_for_price=path,
                                            tg_id=query.from_user.id)
                await self.bot.send_document(chat_id=query.from_user.id,
                                             document=InputFile(path_to_excel))
                os.remove(path_to_excel)
                text = '<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞.</b>'
            else:
                text = '–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–∫–∞ —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º —ç—Ç–æ–≥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å üòî\n\n' \
                       '–ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.'
            markup = markups.another_price_segmentation_markup()
            return dict(text=text, markup=markup)

    async def get_article_month_sales(self, state):
        text = '–ü—Ä–∏—à–ª–∏ –û–î–ò–ù –∞—Ä—Ç–∏–∫—É–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n' \
               '–ê—Ä—Ç–∏–∫—É–ª –≤—Å–µ–≥–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä.'
        markup = markups.back_to_main_menu_markup()
        await state.set_state(states.NameGroup.article_for_sales)
        return dict(text=text, markup=markup)

    async def waiting_month_sales(self, message, state):
        article_pattern = r'[0-9]{8}'
        if re.fullmatch(article_pattern, message.text):
            async with state.proxy() as data:
                data['article_for_sales'] = message.text
            text = 'üìà<b>–°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫..</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.'
            markup = None
            is_valid_article = True
        else:
            text = '<b>–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.</b>\n'\
                   '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ 8 —Ü–∏—Ñ—Ä.'
            markup = markups.another_month_sales_markup()
            is_valid_article = False
        return dict(text=text, markup=markup, is_valid_article=is_valid_article)

    async def ploting_graph_month_sales(self, message, state):
        async with state.proxy() as data:
            graph_data = await mpstats.get_card_data(data['article_for_sales'])
            if graph_data:
                result = utils.plot_month_sales_graph(graph_data, data['article_for_sales'])
            else:
                result = None
            if result:
                user = self.db.get_user(tg_id=message.from_user.id)
                if user:
                    self.db.add_sales_article(article=data['article_for_sales'],
                                              tg_id=message.from_user.id)
                await self.bot.send_document(chat_id=message.from_user.id,
                                             document=InputFile(result['image_path']))
                os.remove(result['image_path'])
                text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥—Ä–∞—Ñ–∏–∫ –∑–∞ {result['start_day']} - {result['end_day']} –≥–æ—Ç–æ–≤.\n" \
                       f"<b>–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞ –º–µ—Å—è—Ü: {result['total_sales']}\n" \
                       f"–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞: {result['balance_at_the_end']}</b>"
            else:
                text = '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.</b>\n' \
                       '–ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.\n' \
                       '–î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–∂ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
        markup = markups.another_month_sales_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    async def get_article_card_queries(self, state):
        text = '–ü—Ä–∏—à–ª–∏ –û–î–ò–ù –∞—Ä—Ç–∏–∫—É–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤.\n' \
               '–ê—Ä—Ç–∏–∫—É–ª –≤—Å–µ–≥–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —Ü–∏—Ñ—Ä.\n' \
               '<b>–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ' \
               '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ WB (–¥–æ 100 –ø–æ–∑–∏—Ü–∏–π).</b>'
        markup = markups.back_to_main_menu_markup()
        await state.set_state(states.NameGroup.article_for_queries)
        return dict(text=text, markup=markup)

    async def waiting_queries_table(self, message, state):
        article_pattern = r'[0-9]{8}'
        if re.fullmatch(article_pattern, message.text):
            async with state.proxy() as data:
                data['article_for_queries'] = message.text
            text = 'üìè<b>–°—Ç—Ä–æ–∏–º —Ç–∞–±–ª–∏—Ü—É..</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.'
            markup = None
            is_valid_article = True
        else:
            text = '<b>–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.</b>\n'\
                   '–ê—Ä—Ç–∏–∫—É–ª –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ 8 —Ü–∏—Ñ—Ä.'
            markup = markups.another_card_queries_markup()
            is_valid_article = False
        return dict(text=text, markup=markup, is_valid_article=is_valid_article)

    async def creating_queries_table(self, message, state):
        async with state.proxy() as data:
            card_data = await mpstats.get_card_data(data['article_for_queries'])
            if card_data:
                result = utils.create_queries_table(card_data, data['article_for_queries'])
            else:
                result = None
            if result:
                user = self.db.get_user(tg_id=message.from_user.id)
                if user:
                    self.db.add_search_article(article=data['article_for_queries'],
                                               tg_id=message.from_user.id)
                await self.bot.send_document(chat_id=message.from_user.id,
                                             document=InputFile(result))
                os.remove(result)
                text = f'<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –≤—ã–¥–∞—á–∞—Ö –ø–æ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º.</b>\n' \
                        '–í —Ç–∞–±–ª–∏—Ü–µ —Ç–∏—Ä–µ "-" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –±–æ–ª—å—à–µ 100.'
            else:
                text = '<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.</b>\n' \
                       '–ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.\n' \
                       '–î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ª—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–¥–∞–∂ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
        markup = markups.another_card_queries_markup()
        await state.finish()
        return dict(text=text, markup=markup)

    async def rename_card_API_ask(self, state):
            markup = markups.back_to_main_menu_markup()
            text = CARD_RENAME_TEXT_1
            await state.set_state(states.CardRename.get_API)
            return dict(text=text, markup=markup)

    async def rename_card_supplierID_ask(self, message, state):  
        async with state.proxy() as data:
            markup = markups.back_to_API_step()
            data["get_API"] = message.text
            text = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ supplier-id.\n" \
                "<b>–í–ê–ñ–ù–û!</b> –°–∫–æ–ø–∏—Ä—É–π—Ç–µ id –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, " \
                "–∏–Ω–∞—á–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è."
            await state.set_state(states.CardRename.get_supID)
            return dict(text=text, markup=markup)

    async def rename_card_article_and_name_ask(self, message, state):   
        async with state.proxy() as data:
            markup = markups.back_to_supplierID_step()
            data["get_supID"] = message.text
            text = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n" \
                    "<b>–ù–∞–ø—Ä–∏–º–µ—Ä</b> - 12345678 –°–≤–∏—Ç–µ—Ä –∂–µ–Ω—Å–∫–∏–π –æ–≤–µ—Ä—Å–∞–π–∑"
            await state.set_state(states.CardRename.get_article_and_new_name)
            return dict(text=text, markup=markup)

    async def rename_card(self, message, state):
        async with state.proxy() as data:
            data["get_article_and_new_name"] = message.text.split(' ', maxsplit = 1)
            art_number = int(data["get_article_and_new_name"][0])
            new_name = data["get_article_and_new_name"][1]
            APIkey = data["get_API"]
            supID = data["get_supID"]
            if await wb.rename_the_card(new_name, art_number, APIkey, supID):
                text = "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–∞—à–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.\n" \
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç."
                markup = markups.another_card_rename()
                await state.finish()
                return dict(text=text, markup=markup)
            else:
                text = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.\n" \
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ API-–∫–ª—é—á–∞, supplier-id " \
                        "–∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                markup = markups.back_to_article_and_new_name_step()
                return dict(text=text, markup=markup)

    async def instruction_bar(self):
        markup = markups.back_to_main_menu_markup()
        text = f"{FAQ} {hlink('OPTSHOP', 'https://t.me/opt_tyrke')}"
        return dict(text=text, markup=markup)
